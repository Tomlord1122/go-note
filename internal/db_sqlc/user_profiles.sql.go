// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_profiles.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkUsernameExists = `-- name: CheckUsernameExists :one
SELECT EXISTS(
    SELECT 1 FROM user_profiles WHERE username = $1
) as exists
`

func (q *Queries) CheckUsernameExists(ctx context.Context, username pgtype.Text) (bool, error) {
	row := q.db.QueryRow(ctx, checkUsernameExists, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO user_profiles (id, username, display_name, avatar_url, preferences)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, display_name, avatar_url, preferences, created_at, updated_at
`

type CreateUserProfileParams struct {
	ID          pgtype.UUID `json:"id"`
	Username    pgtype.Text `json:"username"`
	DisplayName pgtype.Text `json:"display_name"`
	AvatarUrl   pgtype.Text `json:"avatar_url"`
	Preferences []byte      `json:"preferences"`
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, createUserProfile,
		arg.ID,
		arg.Username,
		arg.DisplayName,
		arg.AvatarUrl,
		arg.Preferences,
	)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Preferences,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserProfile = `-- name: DeleteUserProfile :exec
DELETE FROM user_profiles
WHERE id = $1
`

func (q *Queries) DeleteUserProfile(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserProfile, id)
	return err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT id, username, display_name, avatar_url, preferences, created_at, updated_at
FROM user_profiles
WHERE id = $1
`

func (q *Queries) GetUserProfile(ctx context.Context, id pgtype.UUID) (UserProfile, error) {
	row := q.db.QueryRow(ctx, getUserProfile, id)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Preferences,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserProfileByUsername = `-- name: GetUserProfileByUsername :one
SELECT id, username, display_name, avatar_url, preferences, created_at, updated_at
FROM user_profiles
WHERE username = $1
`

func (q *Queries) GetUserProfileByUsername(ctx context.Context, username pgtype.Text) (UserProfile, error) {
	row := q.db.QueryRow(ctx, getUserProfileByUsername, username)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Preferences,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserProfiles = `-- name: ListUserProfiles :many
SELECT id, username, display_name, avatar_url, preferences, created_at, updated_at
FROM user_profiles
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUserProfilesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserProfiles(ctx context.Context, arg ListUserProfilesParams) ([]UserProfile, error) {
	rows, err := q.db.Query(ctx, listUserProfiles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserProfile{}
	for rows.Next() {
		var i UserProfile
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.DisplayName,
			&i.AvatarUrl,
			&i.Preferences,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE user_profiles
SET 
    username = COALESCE($2, username),
    display_name = COALESCE($3, display_name),
    avatar_url = COALESCE($4, avatar_url),
    preferences = COALESCE($5, preferences),
    updated_at = NOW()
WHERE id = $1
RETURNING id, username, display_name, avatar_url, preferences, created_at, updated_at
`

type UpdateUserProfileParams struct {
	ID          pgtype.UUID `json:"id"`
	Username    pgtype.Text `json:"username"`
	DisplayName pgtype.Text `json:"display_name"`
	AvatarUrl   pgtype.Text `json:"avatar_url"`
	Preferences []byte      `json:"preferences"`
}

// COALESCE is used to update the user profile with the new values if they are not null, if they are null, the old value will be kept.
func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (UserProfile, error) {
	row := q.db.QueryRow(ctx, updateUserProfile,
		arg.ID,
		arg.Username,
		arg.DisplayName,
		arg.AvatarUrl,
		arg.Preferences,
	)
	var i UserProfile
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.Preferences,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
